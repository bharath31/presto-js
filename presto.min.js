(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?module.exports=factory():typeof define==="function"&&define.amd?define(factory):(global=global||self,global.Presto=factory())})(this,function(){"use strict";class PrestoXhr{constructor(options){this.options=options;this.xhr=new XMLHttpRequest;this.xhr.withCredentials=options.withCredentials;this.formData=new FormData}sendChunk(chunkData){this.xhr.open("POST",this.options.url,true);this._setHeaders(chunkData);this._setFormData(chunkData);return new Promise((resolve,reject)=>{this.xhr.onload=(()=>{if(this.xhr.status<400){resolve()}else{reject(chunkData.chunkIndex,this.xhr.status,this.xhr.statusText)}});this.xhr.onerror=(error=>{reject(chunkData.chunkIndex,this.xhr.status,this.xhr.statusText)});this.xhr.send(this.formData)})}_setFormData(chunkData){let setMethod="set";if(this.formData.set===undefined){this.formData=new FormData;setMethod="append"}this.formData[setMethod]("prestoId",chunkData.prestoId);this.formData[setMethod]("prestoChunkIndex",chunkData.chunkIndex);this.formData[setMethod]("chunk",chunkData.blob);this.formData[setMethod]("totalChunkNumber",chunkData.totalChunkNumber);this.formData[setMethod]("name",chunkData.name);this.formData[setMethod]("size",chunkData.size);Object.keys(chunkData.data).forEach(key=>{this.formData[setMethod](key,chunkData.data[key])})}_setHeaders(){const headers=this.options.httpHeaders();Object.keys(headers).forEach(key=>{this.xhr.setRequestHeader(key,headers[key])})}}class Uploader{constructor(options,getNextChunk){this.options=options;this.getNextChunk=getNextChunk;this.pool=Array(options.simultaneous).fill(null).map(s=>{return new PrestoXhr(options)});this.sending=false}start(){this.sending=true;this.startTime=Date.now();this.pool.forEach(prestoXhr=>{this._loop(prestoXhr)})}stop(){this.sending=false}_loop(prestoXhr){const chunkData=this.getNextChunk();if(chunkData===null){setTimeout(()=>{if(this.sending===true){this._loop(prestoXhr)}},100);return}prestoXhr.sendChunk(chunkData).then(chunkIndex=>{chunkData.onSuccess();if(this.sending===true){this._loop(prestoXhr)}},(chunkIndex,statusCode,statusText)=>{chunkData.onError(chunkIndex,statusCode,statusText);if(this.sending===true){this._loop(prestoXhr)}})}}class EventDispatcher{constructor(){this.events={}}addListener(event,callback){if(!this.events.hasOwnProperty(event)){this.events[event]=[]}this.events[event].push(callback)}removeListener(event,fn){if(event===undefined){this.events={};return}let newEvents={};Object.keys(this.events).forEach(k=>{if(k===event){let updated=[];if(Array.isArray(this.events[k])){this.events[k].forEach(callback=>{if(callback!==fn){updated.push(callback)}})}newEvents[k]=updated}else{newEvents[k]=this.events[k]}});this.events=newEvents}dispatch(event,args){const argArray=args===undefined?[]:args;if(this.events[event]===undefined){return}this.events[event].forEach(callback=>{callback(...argArray)})}}const genUUIDv4=()=>{return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,c=>{const r=Math.random()*16|0,v=c=="x"?r:r&3|8;return v.toString(16)})};const humanReadableSize=size=>{let byte=Math.abs(parseFloat(size,10));const units=["kB","MB","GB","TB","PB","EB","ZB","YB"];let idx=-1;do{byte/=1024;idx+=1}while(byte>=1024&&idx<units.length-1);return byte.toFixed(1)+" "+units[idx]};class PrestoFile{constructor(fileObject,data,options){this.fileObject=fileObject;this.prestoId=options.uniqueIdGenerator(fileObject);this.status="waiting";this.chunkSize=options.chunkSize;this.name=this._getFileName();this.size=this._getFileSize();this.displaySize=this._getDisplaySize();this.totalChunkNumber=parseInt(this.size/this.chunkSize,10)+1;this.lastChunkIndex=-1;this.successChunkCount=0;this.errorChunkIndexList=[];this.eventDispatcher=new EventDispatcher;this.data=data}on(event,callback){this.eventDispatcher.addListener(event,callback)}off(event,fn){this.eventDispatcher.removeListener(event,fn)}fire(event,args){this.eventDispatcher.dispatch(event,args)}send(){if(["waiting","pending","error"].includes(this.status)){this.status="ready";this.fire("start",[this])}}abort(){if(["ready","sending","error"].includes(this.status)){this.status="pending";this.fire("abort",[this])}}getNextChunk(){if(!["ready","sending"].includes(this.status)){return null}const chunkIndex=this._getNextChunkIndex();if(chunkIndex>=this.totalChunkNumber){return null}if(this.successChunkCount>=this.totalChunkNumber-1){this.status="closing"}return{chunkIndex:chunkIndex,blob:this._sliceBlob(chunkIndex),prestoId:this.prestoId,totalChunkNumber:this.totalChunkNumber,name:this.name,size:this.size,data:this.data,onSuccess:this.chunkSuccess.bind(this),onError:this.chunkError.bind(this)}}chunkSuccess(){this.successChunkCount+=1;this.fire("progress",[this.progress(),this]);if(this.successChunkCount<this.totalChunkNumber){return}this._fileComplete()}chunkError(chunkIndex,statusCode,statusText){this.errorChunkIndexList.push(chunkIndex);this.status="sending";this.fire("error",[chunkIndex,statusCode,statusText,this])}progress(){return this.successChunkCount/this.totalChunkNumber}_fileComplete(){this.status="done";this.fire("complete",[this])}_getNextChunkIndex(){if(this.errorChunkIndexList.length>0){return this.errorChunkIndexList.shift()}this.lastChunkIndex+=1;return this.lastChunkIndex}_sliceBlob(index){const start=index*this.chunkSize;if(start>this.size){return null}let stop=start+this.chunkSize;if(stop>this.size){stop=this.size}return this.fileObject.slice(start,stop)}_getFileName(){return this.fileObject.name}_getFileSize(){return parseInt(this.fileObject.size,10)}_getDisplaySize(){return humanReadableSize(this._getFileSize())}}const defaultOptions={element:null,chunkSize:1*1024*1024,simultaneous:6,url:"",httpHeaders:()=>{return{}},uniqueIdGenerator:fileObject=>{return`presto_${genUUIDv4()}`},withCredentials:false};class Presto{constructor(options={}){this.options=Object.assign({},defaultOptions,options);this.fileList=[];this.uploader=new Uploader(this.options,this.getNextChunk.bind(this));this.startTime=null;this.eventDispatcher=new EventDispatcher;if(typeof options.element==="object"){this._initWithFormElement(options.element)}}_initWithFormElement(el){el.querySelector('input[type="file"]').addEventListener("change",e=>{this.reset.call(this,e.target.files)});el.addEventListener("submit",e=>{e.preventDefault();this.send.call(this)})}on(event,callback){this.eventDispatcher.addListener(event,callback)}off(event,fn){this.eventDispatcher.removeListener(event,fn)}fire(event,args){this.eventDispatcher.dispatch(event,args)}add(fileList,data={}){let addedList=[];Array.from(fileList).forEach(f=>{const prestoFile=new PrestoFile(f,data,this.options);this.fileList.push(prestoFile);addedList.push(prestoFile);this._setFileEvents(prestoFile)});this.fire("added",[addedList])}remove(prestoId){if(prestoId===undefined||prestoId===null){const removedIdList=this.fileList.map(f=>{return f.prestoId});this.fileList=[];this.fire("removed",[removedIdList]);return}this.fileList=this.fileList.filter(f=>{return f.prestoId!==prestoId});this.fire("removed",[[prestoId]])}reset(fileList,data={}){this.fileList=[];if(fileList!==undefined&&fileList!==null){this.add(fileList,data)}this.fire("reset")}send(prestoId){if(prestoId===undefined||prestoId===null){this.fileList.forEach(f=>{f.send()})}const targetFile=this.fileList.find(f=>{return f.prestoId===prestoId});if(targetFile!==undefined){targetFile.send()}const firstFile=this.fileList.find(f=>{return f.status==="ready"});if(firstFile===undefined){return}if(this.uploader.sending===false){this.uploader.start();this.startTime=Date.now();this.fire("start")}}abort(prestoId){if(this.uploader.sending===false){return}if(prestoId===undefined||prestoId===null){this.uploader.stop()}const targetFile=this.fileList.find(f=>{return f.prestoId===prestoId});if(targetFile!==undefined){targetFile.abort()}this.fire("abort")}progress(){let total=0;let send=0;this.fileList.forEach(f=>{total+=f.size;send+=f.size*f.progress()});if(total===0){return 0}return send/total}getNextChunk(){const targetFile=this.fileList.find(f=>{return["ready","sending"].includes(f.status)});if(targetFile===undefined){const unfinishedFile=this.fileList.find(f=>{return["ready","sending","closing","pending"].includes(f.status)});if(unfinishedFile===undefined){this.uploader.stop();this.fire("complete",[Date.now()-this.startTime])}return null}return targetFile.getNextChunk()}_setFileEvents(prestoFile){prestoFile.on("progress",(fileProgress,_prestoFile)=>{this.fire("fileProgress",[fileProgress,_prestoFile]);this.fire("progress",[this.progress()])});prestoFile.on("start",_prestoFile=>{this.fire("fileStart",[_prestoFile])});prestoFile.on("abort",_prestoFile=>{this.fire("fileAbort",[_prestoFile])});prestoFile.on("complete",_prestoFile=>{this.fire("fileComplete",[_prestoFile])});prestoFile.on("error",(chunkIndex,statusCode,statusText,_prestoFile)=>{this.fire("fileError",[chunkIndex,statusCode,statusText,_prestoFile])})}}return Presto});